name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Environments
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y build-essential zip

      - name: Build All week6 Patterns
        run: |
          mkdir -p build_outputs
          cd week6

          for pattern in */; do
            cd "$pattern"
            pattern_name=$(basename "$pattern")
            echo "🔧 Building $pattern_name..."

            # C++: *.cpp + Makefile
            if [ -f "${pattern_name}.cpp" ]; then
              echo "⚙️ Building C++ for $pattern_name"
              g++ -o "${pattern_name}_cpp" "${pattern_name}.cpp"
              [ -f "${pattern_name}_cpp" ] && cp "${pattern_name}_cpp" ../../build_outputs/
            fi

            # Rust: <Pattern>_Rust/Cargo.toml
            if [ -d "${pattern_name}_Rust" ]; then
              echo "⚙️ Building Rust for $pattern_name"
              cd "${pattern_name}_Rust"
              cargo build --release
              exe=$(find target/release -maxdepth 1 -type f -executable | head -n1)
              [ -n "$exe" ] && cp "$exe" ../../build_outputs/"${pattern_name}_rust"
              cd ..
            fi

            # Kotlin: *.jar
            if [ -f "${pattern_name}.jar" ]; then
              echo "📦 Copying Kotlin JAR for $pattern_name"
              cp "${pattern_name}.jar" ../../build_outputs/
            fi

            # C#: <Pattern>App/*.csproj
            if [ -d "${pattern_name}App" ]; then
              echo "⚙️ Building C# for $pattern_name"
              dotnet publish "${pattern_name}App/${pattern_name}App.csproj" -c Release -o publish_output
              cp -r publish_output "../../build_outputs/${pattern_name}_csharp"
            fi

            # Python: *.py
            if [ -f "main.py" ]; then
              echo "🐍 Copying Python for $pattern_name"
              cp main.py ../../build_outputs/"${pattern_name}_python.py"
            fi

            cd ..
          done

      - name: Create ZIP Archive
        run: |
          cd build_outputs
          zip -r ../release_artifacts.zip .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/heads/main')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}
          name: Release ${{ github.run_number }}
          files: release_artifacts.zip
