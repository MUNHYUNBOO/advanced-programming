name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write  # ✅ GitHub Release를 만들기 위한 권한 부여

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Environments
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y build-essential zip

      - name: Build All Week Patterns
        run: |
          if [ -f build_outputs ]; then
            echo "⚠️ Removing accidentally created build_outputs file"
            rm build_outputs
          fi
          mkdir -p build_outputs

          for week in week*/; do
            echo "📁 Entering $week"
            cd "$week"

            for pattern in */; do
              cd "$pattern"
              pattern_name=$(basename "$pattern")
              echo "🔧 Building $pattern_name in $week..."

              # 💻 C++ (*.cpp)
              cpp_file=$(find . -maxdepth 1 -name "*.cpp" | head -n1)
              if [ -n "$cpp_file" ]; then
                echo "⚙️ Building C++ for $pattern_name ($cpp_file)"
                exe_name="${pattern_name}_cpp"
                g++ -o "$exe_name" "$cpp_file" 2>/dev/null || echo "❌ C++ build failed"
                [ -f "$exe_name" ] && cp "$exe_name" ../../../build_outputs/
              fi

              # 🦀 Rust (<pattern>_Rust/Cargo.toml)
              if [ -d "${pattern_name}_Rust" ]; then
                echo "⚙️ Building Rust for $pattern_name"
                cd "${pattern_name}_Rust"
                cargo build --release || echo "❌ Rust build failed for $pattern_name"
                exe=$(find target/release -maxdepth 1 -type f -executable | head -n1)
                echo "Rust executable: $exe"
                if [ -n "$exe" ]; then
                  mkdir -p ../../../build_outputs
                  cp "$exe" ../../../build_outputs/"${pattern_name}_rust"
                else
                  echo "❌ No Rust executable found for $pattern_name"
                fi
                cd ..
              fi

              # ☕ Kotlin (JAR 파일)
              if [ -f "${pattern_name}.jar" ]; then
                echo "📦 Copying Kotlin JAR for $pattern_name"
                cp "${pattern_name}.jar" ../../../build_outputs/
              fi

              # 🧩 C# (.csproj in <pattern_name>App/)
              if [ -d "${pattern_name}App" ]; then
                echo "⚙️ Building C# for $pattern_name"
                dotnet publish "${pattern_name}App/${pattern_name}App.csproj" -c Release -o publish_output || echo "❌ C# build failed"
                if [ -d publish_output ]; then
                  mkdir -p ../../../build_outputs
                  cp -r publish_output "../../../build_outputs/${pattern_name}_csharp"
                fi
              fi

              # 🐍 Python (*.py)
              py_file=$(find . -maxdepth 1 -name "*.py" | head -n1)
              if [ -n "$py_file" ]; then
                echo "🐍 Copying Python ($py_file) for $pattern_name"
                mkdir -p ../../../build_outputs
                cp "$py_file" ../../../build_outputs/"${pattern_name}_python.py"
              fi

              cd ..
            done

            cd ..
          done

      - name: Create ZIP Archive
        run: |
          cd build_outputs
          zip -r ../release_artifacts.zip .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/heads/main')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}
          name: Release ${{ github.run_number }}
          files: release_artifacts.zip
