name: Build and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Environments
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install build-essential
        run: sudo apt-get update && sudo apt-get install -y build-essential zip

      - name: Build All Projects
        run: |
          mkdir -p build_outputs
          for week in week*/; do
            week_name=$(basename "$week")
            for lang in "$week"*/; do
              lang_name=$(basename "$lang")
              echo "🛠️ Processing $week_name/$lang_name..."
              cd "$lang"
              
              case "$lang_name" in
                cpp)
                  [ -f Makefile ] && make
                  exe=$(find . -maxdepth 1 -type f -executable | head -n1)
                  [ -n "$exe" ] && cp "$exe" "../../../build_outputs/${week_name}_cpp"
                  ;;
                rust)
                  [ -f Cargo.toml ] && cargo build --release
                  exe=$(find target/release -maxdepth 1 -type f -executable | head -n1)
                  [ -n "$exe" ] && cp "$exe" "../../../build_outputs/${week_name}_rust"
                  ;;
                csharp)
                  csproj=$(find . -name "*.csproj" | head -n1)
                  if [ -n "$csproj" ]; then
                    dotnet publish "$csproj" -c Release -o publish_output
                    cp -r publish_output "../../../build_outputs/${week_name}_csharp"
                  fi
                  ;;
                kotlin)
                  [ -f build.gradle.kts ] && ./gradlew installDist
                  [ -d build/install ] && cp -r build/install "../../../build_outputs/${week_name}_kotlin"
                  ;;
                python)
                  [ -f main.py ] && cp main.py "../../../build_outputs/${week_name}_python.py"
                  ;;
              esac

              cd - > /dev/null
            done
          done

      - name: Create ZIP Archive
        run: |
          cd build_outputs
          zip -r ../release_artifacts.zip .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/heads/main')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ github.run_number }}
          name: Release ${{ github.run_number }}
          files: release_artifacts.zip
